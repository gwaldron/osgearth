/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_MBTILES_DRIVEROPTIONS
#define OSGEARTH_DRIVER_MBTILES_DRIVEROPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>
#include <osgEarth/URI>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;

    class MBTilesTileSourceOptions : public TileSourceOptions // NO EXPORT; header only
    {
    public:        
        /**
         * The filename of the MBTiles file
         */
        optional<URI>& filename() { return _filename; }
        const optional<URI>& filename() const { return _filename; }

        /**
         * The format of the imagery in the MBTiles file (jpeg, png, etc)
         */
        optional<std::string>& format() { return _format; }
        const optional<std::string>& format() const { return _format; }

        /**
         * Whether to compress the data. This isn't necessary for formats that
         * are already compressed, like JPEG
         */
        optional<bool>& compress() { return _compress; }
        const optional<bool>& compress() const { return _compress; }

        /**
         * Whether or not to automatically compute the valid levels of the MBTiles file.  By default this is true and will
         * scan the table to determine the min/max.  This can take time when first loading the file so if you know the levels of your file 
         * up front you can set this to false and just use the min_level max_level settings of the tile source.
         */
        optional<bool>& computeLevels() { return _computeLevels; }
        const optional<bool>& computeLevels() const { return _computeLevels; }

    public:
        MBTilesTileSourceOptions(const TileSourceOptions& opt =TileSourceOptions()) :
            TileSourceOptions( opt ),
            _computeLevels( true )
        {
            setDriver( "mbtiles" );
            fromConfig( _conf );
        }

    public:
        Config getConfig() const {
            Config conf = TileSourceOptions::getConfig();
            conf.set("filename", _filename);    
            conf.set("format", _format);            
            conf.set("compute_levels", _computeLevels);
            conf.set("compress", _compress);
            return conf;
        }

        void mergeConfig( const Config& conf ) {
            TileSourceOptions::mergeConfig( conf );
            fromConfig( conf );
        }

        void fromConfig( const Config& conf ) {
            conf.get( "filename", _filename );
            conf.get( "url", _filename ); // compat for consistency with other drivers
            conf.get( "format", _format );
            conf.get( "compute_levels", _computeLevels );
            conf.get( "compress", _compress );
        }

    private:
        optional<URI>         _filename;        
        optional<std::string> _format;
        optional<bool>        _computeLevels;
        optional<bool>        _compress;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_MBTILES_DRIVEROPTIONS

