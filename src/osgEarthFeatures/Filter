/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHFEATURES_FILTER_H
#define OSGEARTHFEATURES_FILTER_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/FilterContext>
#include <osg/Matrixd>
#include <list>


namespace osgEarth { namespace Features
{
    using namespace osgEarth;

    /**
     * Base class for a filter.
     */
    class Filter : public osg::Referenced
    {
    };

    /**
     * Base class for feature filters.
     */
    class OSGEARTHFEATURES_EXPORT FeatureFilter : public Filter
    {
    public:
        virtual FilterContext push( FeatureList& input, FilterContext& context ) =0;
    };

    typedef std::list< osg::ref_ptr<FeatureFilter> > FeatureFilterList;

    /**
     * Base class for a filter that converts features into an osg Node.
     */
    class OSGEARTHFEATURES_EXPORT FeaturesToNodeFilter : public Filter
    {
    public:
        virtual osg::Node* push( FeatureList& input, FilterContext& context ) =0;

    public:

        const osg::Matrixd& local2world() const { return _local2world; }

        const osg::Matrixd& world2local() const { return _world2local; }
        
    protected:

        // computes the matricies required to localizer/delocalize double-precision coords
        void computeLocalizers( const FilterContext& context );

        /** Parents the node with a localizer group if necessary */
        osg::Node*  delocalize( osg::Node* node ) const;
        osg::Group* delocalizeAsGroup( osg::Node* node ) const;
        osg::Group* createDelocalizeGroup() const;

        void transformAndLocalize(
            const std::vector<osg::Vec3d>& input,
            const SpatialReference*        inputSRS,
            osg::Vec3Array*                output,
            const SpatialReference*        outputSRS,
            const osg::Matrixd&            world2local,
            bool                           toECEF );

        void transformAndLocalize(
            const osg::Vec3d&              input,
            const SpatialReference*        inputSRS,
            osg::Vec3d&                    output,
            const SpatialReference*        outputSRS,
            const osg::Matrixd&            world2local,
            bool                           toECEF );

        osg::Matrixd _world2local, _local2world;   // for coordinate localization
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_FILTER_H
