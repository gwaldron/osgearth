/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TILE_KEY_H
#define OSGEARTH_TILE_KEY_H 1

#include <osgEarth/Common>
#include <osgEarth/Profile>
#include <osg/Referenced>
#include <osg/Image>
#include <osg/Shape>
#include <osg/Version>
#include <osgDB/ReaderWriter>
#include <osgTerrain/TerrainTile>
#include <string>

namespace osgEarth
{
    /**
     * Uniquely identifies a single tile on the map, relative to a Profile.
     */
    class OSGEARTH_EXPORT TileKey
    {
    public:     
        /**
         * Constructs an invalid TileKey.
         */
        TileKey() { }

        /**
         * Creates a new TileKey with the given tile xy at the specified level of detail
         * 
         * @param lod
         *       The level of detail (subdivision recursion level) of the tile
         * @param tile_x
         *       The x index of the tile
         * @param tile_y
         *       The y index of the tile
         * @param profile
         *       The profile for the tile
         */
        TileKey(
            unsigned int lod,
            unsigned int tile_x,
            unsigned int tile_y,
            const Profile* profile );

        TileKey( const TileKey& rhs );

        bool operator == (const TileKey& rhs) const {
            return valid() && rhs.valid() && _lod==rhs._lod && _x==rhs._x && _y==rhs._y;
        }
        bool operator != (const TileKey& rhs) const {
            return !(*this == rhs);
        }
        bool operator < (const TileKey& rhs) const {
            if (_lod < rhs._lod) return true;
            if (_lod > rhs._lod) return false;
            if (_x < rhs._x) return true;
            if (_x > rhs._x) return false;
            return _y < rhs._y;
        }

        /**
         * Canonical invalid tile key.
         */
        static TileKey INVALID;

        /**
         * Gets the string representation of the key, formatted like:
         * "lod_x_y"
         */
        std::string str() const { return _key; }

        /**
         * Gets a TileID corresponding to this key.
         */
        osgTerrain::TileID getTileId() const;

        /**
         * Gets the profile within which this key is interpreted.
         */
        const osgEarth::Profile* getProfile() const;

        /**
         * Whether this is a valid key.
         */
        const bool valid() const { return _profile.valid(); }

    public:
        /**
         * Gets a reference to the child key of this key in the specified
         * quadrant (0, 1, 2, or 3).
         */
        TileKey createChildKey( unsigned int quadrant ) const;

        /**
         * Creates and returns a key that represents the parent tile of this key.
         */
        TileKey createParentKey() const;

        /**
         * Creates and returns a key that represents an ancestor tile corresponding to
         * the specified LOD.
         */
        TileKey createAncestorKey( int ancestorLod ) const;


        /**
         * Creates a key that represents this tile's neighbor at the same LOD. Wraps
         * around in X and Y automatically.
         */
        enum Direction { NORTH, SOUTH, EAST, WEST };
        TileKey createNeighborKey( Direction dir ) const;

        /**
         * Gets the level of detail of the tile represented by this key.
         */
        unsigned int getLevelOfDetail() const;

        /**
         * Gets the geospatial extents of the tile represented by this key.
         */
        const GeoExtent& getExtent() const {
            return _extent; }

        /**
         * Gets the extents of this key's tile, in pixels
         */
        void getPixelExtents(
            unsigned int& out_minx,
            unsigned int& out_miny,
            unsigned int& out_maxx,
            unsigned int& out_maxy,
            const unsigned int& tile_size) const;

        /**
         * Gets the X and Y indexes of this tile at its level of detail.
         */
        void getTileXY(
            unsigned int& out_tile_x,
            unsigned int& out_tile_y) const;

        unsigned int getTileX() const { return _x; }
        unsigned int getTileY() const { return _y; }
        
		static inline int getLOD(const osgTerrain::TileID& id)
		{
			//The name of the lod changed after OSG 2.6 from layer to level
#if (OPENSCENEGRAPH_MAJOR_VERSION == 2 && OPENSCENEGRAPH_MINOR_VERSION < 7)
			return id.layer;
#else
			return id.level;
#endif
		}

    protected:
        std::string _key;
        unsigned int _lod;
        unsigned int _x;
        unsigned int _y;
        osg::ref_ptr<const Profile> _profile;
        GeoExtent _extent;
    };
}

#endif // OSGEARTH_TILE_KEY_H
