/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2016 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_SIMPLE_SKY_OPTIONS
#define OSGEARTH_DRIVER_SIMPLE_SKY_OPTIONS 1

#include <osgEarthUtil/Sky>

namespace osgEarth { namespace SimpleSky
{
    using namespace osgEarth;
    using namespace osgEarth::Util;

    /**
     * Options for creating a simple sky.
     */
    class SimpleSkyOptions : public SkyOptions
    {
    public:
        SimpleSkyOptions(const ConfigOptions& options =ConfigOptions()) :
          SkyOptions(options),
          _atmosphericLighting (true),
          _exposure            (2.4f),
          _daytimeAmbientBoost (0.0f),
          _allowWireframe      (false)
        {
            setDriver( "simple" );
            fromConfig( _conf );
        }
        virtual ~SimpleSkyOptions() { }

    public: // properties

        /** Use advanced atmospheric lighting on the terrain (instead of simple shading) */
        optional<bool>& atmosphericLighting() { return _atmosphericLighting; }
        const optional<bool>& atmosphericLighting() const { return _atmosphericLighting; }

        /** Exposure factor for simulated HDR ground lighting. Default is in CTOR */
        optional<float>& exposure() { return _exposure; }
        const optional<float>& exposure() const { return _exposure; }

        /** Factor for boosting the ambient lighting of the sun during the daytime. Without
          * this, geometry like buildings or steep hillsides can be lit only based on their
          * normals and can appear too dark during the daytime.
          * 0=off, 2-5 are reasonable values. */
        optional<float>& daytimeAmbientBoost() { return _daytimeAmbientBoost; }
        const optional<float>& daytimeAmbientBoost() const { return _daytimeAmbientBoost; }

        /** replacement star definition file */
        optional<std::string>& starFile() { return _starFile; }
        const optional<std::string>& starFile() const { return _starFile; }

        /** Whether to permit wireframe/point polygonmode rendering. Default is false. */
        optional<bool>& allowWireframe() { return _allowWireframe; }
        const optional<bool>& allowWireframe() const { return _allowWireframe; }

    public:
        Config getConfig() const {
            Config conf = SkyOptions::getConfig();
            conf.addIfSet("atmospheric_lighting", _atmosphericLighting);
            conf.addIfSet("exposure", _exposure);
            conf.addIfSet("daytime_ambient_boost", _daytimeAmbientBoost);
            conf.addIfSet("star_file", _starFile);
            conf.addIfSet("allow_wireframe", _allowWireframe);
            return conf;
        }

    protected:
        void mergeConfig( const Config& conf ) {
            SkyOptions::mergeConfig( conf );
            fromConfig(conf);
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getIfSet("atmospheric_lighting", _atmosphericLighting);
            conf.getIfSet("exposure", _exposure);
            conf.getIfSet("daytime_ambient_boost", _daytimeAmbientBoost);
            conf.getIfSet("star_file", _starFile);
            conf.getIfSet("allow_wireframe", _allowWireframe);
        }

        optional<bool>        _atmosphericLighting;
        optional<float>       _exposure;
        optional<float>       _daytimeAmbientBoost;
        optional<std::string> _starFile;
        optional<bool>        _allowWireframe;
    };

} } // namespace osgEarth::SimpleSky

#endif // OSGEARTH_DRIVER_SIMPLE_SKY_OPTIONS

