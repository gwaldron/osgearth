/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_ELEVATION_TERRAIN_LAYER_H
#define OSGEARTH_ELEVATION_TERRAIN_LAYER_H 1

#include <osgEarth/TileLayer>
#include <osg/MixinVector>

namespace osgEarth
{
    struct ElevationLayerCallback : public TileLayerCallback
    {
        //EMPTY
        typedef void (ElevationLayerCallback::*MethodPtr)(class ElevationLayer*);
    };

    /**
     * A map terrain layer containing elevation grid heightfields.
     */
    class OSGEARTH_EXPORT ElevationLayer : public TileLayer
    {
    public:
        class OSGEARTH_EXPORT Options : public TileLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, TileLayer::Options);
            OE_OPTION(std::string, verticalDatum);
            OE_OPTION(bool, offset);
            OE_OPTION(ElevationNoDataPolicy, noDataPolicy);
            virtual Config getConfig() const;
        private:
            void fromConfig( const Config& conf );
        };

    public:
        META_Layer_Abstract(osgEarth, ElevationLayer, Options, TileLayer);
        
        //! Vertical data identifier (options)
        void setVerticalDatum(const std::string& value);
        const std::string& getVerticalDatum() const;

        //! Whether this layer contains offsets instead of absolute elevation heights
        void setOffset(const bool& value);
        const bool& getOffset() const;

        //! Poly for handling "no-data" elevation values
        void setNoDataPolicy(const ElevationNoDataPolicy& value);
        const ElevationNoDataPolicy& getNoDataPolicy() const;

        //! Override from VisibleLayer
        virtual void setVisible(bool value);
        virtual void setEnabled(bool value);

    public: // methods
        
        /**
         * Creates a GeoHeightField for this layer that corresponds to the extents and LOD 
         * in the specified TileKey. The returned HeightField will always match the geospatial
         * extents of that TileKey.
         *
         * @param key TileKey for which to create a heightfield.
         */
        GeoHeightField createHeightField(const TileKey& key);

        /**
         * Creates a GeoHeightField for this layer that corresponds to the extents and LOD 
         * in the specified TileKey. The returned HeightField will always match the geospatial
         * extents of that TileKey.
         *
         * @param key TileKey for which to create a heightfield.
         * @param progress Callback for tracking progress and cancelation
         */
        GeoHeightField createHeightField(const TileKey& key, ProgressCallback* progress);

        /**
         * Writes a height field for the specified key, if writing is
         * supported and the layer was opened with openForWriting.
         */
        Status writeHeightField(const TileKey& key, const osg::HeightField* hf, ProgressCallback* progress) const;

        /**
         * Whether this layer contains offsets instead of absolute heights
         */
        bool isOffset() const;

    protected: // Layer

        virtual void init();

    protected: // ElevationLayer

        //! Override aspects of the layer Profile as needed
        virtual void applyProfileOverrides();

        //! Entry point for createHeightField
        GeoHeightField createHeightFieldInKeyProfile(const TileKey& key, ProgressCallback* progress);

        //! Subclass overrides this to generate image data for the key.
        //! The key will always be in the same profile as the layer.
        virtual GeoHeightField createHeightFieldImplementation(const TileKey&, ProgressCallback* progress) const
            { return GeoHeightField::INVALID; }

        //! Subalss can override this to enable writing heightfields.
        virtual Status writeHeightFieldImplementation(
            const TileKey& key, 
            const osg::HeightField* hf,
            ProgressCallback* progress) const;
        
        virtual ~ElevationLayer() { }
        
    private:
        mutable Threading::Mutex _mutex;
        
        void assembleHeightField(
            const TileKey& key,
            osg::ref_ptr<osg::HeightField>& out_hf,
            osg::ref_ptr<NormalMap>& out_normalMap,
            ProgressCallback* progress) const;

        void normalizeNoDataValues(osg::HeightField* hf) const;
    };


    /**
     * Vector of elevation layers, with added methods.
     */
    class OSGEARTH_EXPORT ElevationLayerVector : public osg::MixinVector< osg::ref_ptr<ElevationLayer> >
    {
    public:
        /**
         * Populates an existing height field (hf must already exist) with height
         * values from the elevation layers.
         */
        bool populateHeightFieldAndNormalMap(
            osg::HeightField*      hf,
            NormalMap*             normalMap,
            const TileKey&         key,
            const Profile*         haeProfile,
            RasterInterpolation interpolation,
            ProgressCallback*      progress ) const;

    public:
        /** Default ctor */
        ElevationLayerVector();

        /** Copy ctor */
        ElevationLayerVector(const ElevationLayerVector& rhs);
    };

} // namespace osgEarth

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::ElevationLayer::Options);

#endif // OSGEARTH_ELEVATION_TERRAIN_LAYER_H
