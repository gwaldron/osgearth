/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*
* Original author: Thomas Lerman
*/
#ifndef OSGEARTHUTIL_GRAYSCALE_WEIGHTED_COLOR_FILTER
#define OSGEARTHUTIL_GRAYSCALE_WEIGHTED_COLOR_FILTER

#include <osgEarthUtil/Common>
#include <osgEarth/ColorFilter>
#include <osg/Uniform>

namespace osgEarth { namespace Util
{
    /**
    * Weighted Grayscale that adjust the red/green/blue of a texel.
    */
    class OSGEARTHUTIL_EXPORT GrayscaleWeightedColorFilter : public osgEarth::ColorFilter
    {
    public:
        GrayscaleWeightedColorFilter();
        GrayscaleWeightedColorFilter(const Config& conf);
        virtual ~GrayscaleWeightedColorFilter() { }

        /**
        * The red/green/blue weight, each component is [0..1] (no change with all at 0)
        */
        void setRGBWeight(const osg::Vec3f& rgb);
        osg::Vec3f getRGBWeight(void) const;

        /**
        * Predefined weights
        */
        // 0.21 R + 0.71 G + 0.08 B. (weighted perceptual average)
        // adapted from http://www.johndcook.com/blog/2009/08/24/algorithms-convert-color-grayscale/
        void setWeightedPerceptualAverage(void) { setRGBWeight(osg::Vec3f(0.21f, 0.71f, 0.08f)); }

        // 0.3 R + 0.59 G + 0.11 B (gimp grayscale)
        // adapted from http://gimp-savvy.com/BOOK/index.html?node54.html
        void setGimpGrayscale(void) { setRGBWeight(osg::Vec3f(0.30f, 0.59f, 0.11f)); }

    public: // ColorFilter
        virtual std::string getEntryPointFunctionName(void) const;
        virtual void install(osg::StateSet* stateSet) const;
        virtual Config getConfig() const;

    protected:
        unsigned m_instanceId;
        osg::ref_ptr<osg::Uniform> m_rgb;

        void init();
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_GRAYSCALE_WEIGHTED_COLOR_FILTER
