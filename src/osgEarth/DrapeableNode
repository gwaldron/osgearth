/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2011 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_DRAPEABLE_NODE_H
#define OSGEARTH_DRAPEABLE_NODE_H 1

#include <osgEarth/Common>
#include <osgEarth/MapNode>

namespace osgEarth
{
    /**
     * Base class for a graph that can be "draped" on the MapNode terrain
     * using the overlay decorator.
     */
    class OSGEARTH_EXPORT DrapeableNode : public osg::Group
    {
    public:
        /**
         * Constructs a new drapeable node.
         */
        DrapeableNode( MapNode* mapNode, bool draped =true );

        /**
         * Whether to drape the node content on the mapnode terrain.
         */
        void setDraped( bool value );
        bool getDraped() const { return _draped; }

        /**
         * Gets the map node used to drape this node
         */
        MapNode* getMapNode() { return _mapNode.get(); }

    public: // osg::Node

        virtual void traverse( osg::NodeVisitor& nv );

    public: // osg::Group

        // override these in order to manage the proxy container.
        virtual bool addChild( osg::Node* child );
        virtual bool insertChild( unsigned index, osg::Node* child );
        virtual bool removeChild( osg::Node* child );
        virtual bool replaceChild( osg::Node* origChild, osg::Node* newChild );

    private:
        bool                       _draped;
        bool                       _dirty;
        bool                       _newDraped;
        osg::ref_ptr<osg::Group>   _overlayProxyContainer;
        osg::observer_ptr<MapNode> _mapNode;

        void applyChanges();
    };

} // namespace osgEarth

#endif // OSGEARTH_DRAPEABLE_NODE_H
