/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_DRIVER_TILESERVICE_DRIVEROPTIONS
#define OSGEARTH_DRIVER_TILESERVICE_DRIVEROPTIONS 1

#include <osgEarth/Common>
#include <osgEarth/TileSource>

namespace osgEarth { namespace Drivers
{
    using namespace osgEarth;

    class TileServiceOptions : public TileSourceOptions // NO EXPORT; header only
    {
    public:
        optional<URI>& url() { return _url; }
        const optional<URI>& url() const { return _url; }

        optional<std::string>& dataset() { return _dataset; }
        const optional<std::string>& dataset() const { return _dataset; }

        optional<std::string>& format() { return _format; }
        const optional<std::string>& format() const { return _format; }

    public:
        TileServiceOptions( const TileSourceOptions& opt =TileSourceOptions() ) : TileSourceOptions( opt )
        {
            setDriver( "tileservice" );
            fromConfig( _conf );
        }

    public:
        Config getConfig() const {
            Config conf = TileSourceOptions::getConfig();
            conf.updateIfSet("dataset", _dataset);
            conf.updateIfSet("url", _url );
            conf.updateIfSet("format", _format);
            return conf;
        }
    protected:
        void mergeConfig( const Config& conf ) {
            TileSourceOptions::mergeConfig( conf );
            fromConfig(conf);
        }

    private:
        void fromConfig( const Config& conf ) {
            conf.getIfSet( "dataset", _dataset );
            conf.getIfSet( "url", _url );
            conf.getIfSet( "format", _format );
        }

        optional<URI> _url;
        optional<std::string> _dataset, _format;
    };

} } // namespace osgEarth::Drivers

#endif // OSGEARTH_DRIVER_TILESERVICE_DRIVEROPTIONS

