/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2020 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_RANDOM_H
#define OSGEARTH_RANDOM_H 1

#include <osgEarth/Common>

namespace osgEarth { namespace Util
{
    /**
     * Psuedo random number generator. Results are guaranteed to be consistent across
     * machines given the same seed value.
     */
    class OSGEARTH_EXPORT Random
    {
    public:
        enum Method
        {
            METHOD_FAST        // not great, but super-fast and cheap.
        };

    public:
        /**
         * Constructs a new random number generator. It is seeded with
         * the system clock.
         * @param method RNG method to use
         */
        Random( Method method =METHOD_FAST );

        /**
         * Constucts a new random number generator with a user-specified seed.
         * The results are guaranteed to be globally consistent.
         * @param seed   RNG seed value
         * @param method RNG method to use
         */
        Random( unsigned seed, Method method =METHOD_FAST );

        /**
         * Copy constructor.
         */
        Random( const Random& rhs );

        /** dtor */
        virtual ~Random() { }

        /**
         * Seeds the PRNG with a new seed.
         */
        void seed(unsigned s);

        /**
         * Resets the PRNG to its initial state (initial seed).
         */
        void reset();

        /**
         * Gets the next random number as an unsigned int.
         * @param mod Modulus value. The result will fall within the range [0..mod)
         */
        unsigned next( unsigned mod );

        /**
         * Gets the next random number as a double in the range [0..1].
         */
        double next();

    private:
        Method   _method;
        unsigned _seed;
        unsigned _next;
    };
} }

#endif // OSGEARTH_RANDOM_H
