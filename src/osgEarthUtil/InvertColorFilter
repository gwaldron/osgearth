/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*
* Original author: Thomas Lerman
*/
#ifndef OSGEARTHUTIL_INVERT_COLOR_FILTER
#define OSGEARTHUTIL_INVERT_COLOR_FILTER

#include <osgEarthUtil/Common>
#include <osgEarth/ColorFilter>
#include <osg/Uniform>

namespace osgEarth { namespace Util
{
    /**
    * Color filter that inverts the color of a texel.
    */
    class OSGEARTHUTIL_EXPORT InvertColorFilter : public osgEarth::ColorFilter
    {
    public:
        InvertColorFilter();
        InvertColorFilter(const Config& conf);
        virtual ~InvertColorFilter() { }

        /**
        * The inverts the incoming pixel value.
        * (For example, => false is no change. => true is inverted)
        *
        */
        void setInvert(const bool invert);
        bool getInvert(void) const;

    public: // ColorFilter
        virtual std::string getEntryPointFunctionName(void) const;
        virtual void install(osg::StateSet* stateSet) const;
        virtual Config getConfig() const;

    protected:
        unsigned                   m_instanceId;
        osg::ref_ptr<osg::Uniform> m_invert;

        void init();
    };

} } // namespace osgEarth::Util

#endif // OSGEARTHUTIL_INVERT_COLOR_FILTER
