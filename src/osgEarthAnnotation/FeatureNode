/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ANNO_FEATURE_NODE_H
#define OSGEARTH_ANNO_FEATURE_NODE_H 1

#include <osgEarthAnnotation/AnnotationNode>
#include <osgEarth/MapNode>
#include <osgEarthSymbology/Style>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/GeometryCompiler>

namespace osgEarth { namespace Annotation
{
    using namespace osgEarth;
    using namespace osgEarth::Features;
    using namespace osgEarth::Symbology;

    /**
     * A node that renders a single feature. Since no feature profile is provided,
     * the feature must contain geometry that is in the same SRS as the map.
     */
    class OSGEARTHANNO_EXPORT FeatureNode : public AnnotationNode
    {
    public:
        META_AnnotationNode(osgEarthAnnotation, FeatureNode);

        FeatureNode( 
            MapNode* mapNode, 
            Feature* feature, 
            bool     draped   =true, 
            const GeometryCompilerOptions& options = GeometryCompilerOptions() );

        void setFeature( Feature* feature );

        void init();

    public: // AnnotationNode

        virtual osg::Group* getAttachPoint();

    protected:
        osg::observer_ptr<MapNode>  _mapNode;
        osg::ref_ptr<Feature>       _feature;
        optional<Style>             _style;
        GeometryCompilerOptions     _options;
        bool                        _draped;
        osg::Group*                 _attachPoint;

        FeatureNode() { }
        FeatureNode(const FeatureNode& rhs, const osg::CopyOp& op) { }
        
    };

} } // namespace osgEarth::Annotation

#endif // OSGEARTH_ANNO_FEATURE_NODE_H
