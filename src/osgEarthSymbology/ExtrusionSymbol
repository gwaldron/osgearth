/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHSYMBOLOGY_EXTRUSION_SYMBOL_H
#define OSGEARTHSYMBOLOGY_EXTRUSION_SYMBOL_H 1

#include <osgEarthSymbology/Common>
#include <osgEarthSymbology/Symbol>
#include <osgEarthSymbology/Expression>

namespace osgEarth { namespace Symbology
{
    using namespace osgEarth;

    /**
     * Symbol that directs the GeometryCompiler to create extruded 3D geometry
     * from 2D vector data.
     */
    class OSGEARTHSYMBOLOGY_EXPORT ExtrusionSymbol : public Symbol
    {
    public:
        // @deprecated
        enum HeightReference
        {
            /** Means that the "height" value as provided in this symbol is expressed
                relative to the Z of the input geometry. This is the usual way to extrude
                geometry- extrude up from the geometry's base Z height. (default.) */
            HEIGHT_REFERENCE_Z,

            /** Means the "height" value is expressed in absolute terms, i.e., relative to 
                MSL (mean sea level, which is usually the map's ellipsoid). If your height
                value is an absolute elevation, use this to "extrude down" to the terrain. */
            HEIGHT_REFERENCE_MSL
        };

    public:
        ExtrusionSymbol( const Config& conf =Config() );

        /** Height to which to extrude geometry above the footprint (for HEIGHT_REFERENCE_Z)
            or above MSL (for HEIGHT_REFERENCE_MSL) */
        optional<float>& height() { return _height; }
        const optional<float>& height() const { return _height; }

        /** Simple expression to evaluate to get height */
        optional<NumericExpression>& heightExpression() { return _heightExpr; }
        const optional<NumericExpression>& heightExpression() const { return _heightExpr; }

        /** Reference frame in which height is expressed */
        // @deprecated
        optional<HeightReference>& heightReference() { return _heightRef; }
        const optional<HeightReference>& heightReference() const { return _heightRef; }

        /** Whether the top cap of the extruded geometry should be flat (default=true) */
        optional<bool>& flatten() { return _flatten; }
        const optional<bool>& flatten() const { return _flatten; }

        /** Name of a style describing how to symbolize the extruded walls */
        optional<std::string>& wallStyleName() { return _wallStyleName; }
        const optional<std::string>& wallStyleName() const { return _wallStyleName; }

        /** Name of a style describing how to symbolize the elevated rooftop */
        optional<std::string>& roofStyleName() { return _roofStyleName; }
        const optional<std::string>& roofStyleName() const { return _roofStyleName; }
        
    public:
        virtual Config getConfig() const;
        virtual void mergeConfig( const Config& conf );

    protected:
        optional<float>             _height;
        optional<bool>              _flatten;
        optional<NumericExpression> _heightExpr;
        optional<HeightReference>   _heightRef;
        optional<std::string>       _wallStyleName;
        optional<std::string>       _roofStyleName;
    };

} } // namespace osgEarth::Symbology

#endif // OSGEARTHSYMBOLOGY_EXTRUSION_SYMBOL_H
