#ifndef CLUSTERNODE_H
#define CLUSTERNODE_H

#include <osg/Node>

#include <osgEarthAnnotation/PlaceNode>

#include "kdbush.hpp"

using namespace osgEarth;
using namespace osgEarth::Annotation;

typedef std::pair<int, int> TPoint;
typedef std::vector< std::size_t > TIds;

typedef std::vector< osg::ref_ptr< PlaceNode > > PlaceNodeList;

struct Cluster
{
    osg::ref_ptr< PlaceNode > marker;
    osg::NodeList nodes;
};

typedef std::vector< Cluster > ClusterList;

class StyleClusterCallback : public osg::Referenced
{
public:
    virtual void operator()(Cluster& cluster) {}
};

class CanClusterCallback : public osg::Referenced
{
public:
    virtual bool operator()(osg::Node* a, osg::Node* b) { return true; }
};

class ClusterNode : public osg::Node
{
public:
    ClusterNode(MapNode* mapNode, osg::Image* defaultImage = 0);

    void addNode(osg::Node* node);
    void removeNode(osg::Node* node);

    unsigned int getRadius() const;
    void setRadius(unsigned int radius);

    bool getEnabled() const;
    void setEnabled(bool enabled);

    StyleClusterCallback* getStyleCallback();
    void setStyleCallback(StyleClusterCallback* callback);

    CanClusterCallback* getCanClusterCallback();
    void setCanClusterCallback(CanClusterCallback* callback);
    
    virtual void traverse(osg::NodeVisitor& nv);

protected:

    PlaceNode* getOrCreateLabel();

    void getClusters(osg::Camera* camera, ClusterList& out);
    
    //PlaceNodeList _placeNodes;
    osg::NodeList _nodes;

    unsigned int _radius;

    osg::ref_ptr< osg::Image > _defaultImage;

    PlaceNodeList _labelPool;
    unsigned int _nextLabel;
    osg::observer_ptr< MapNode > _mapNode;

    osg::ref_ptr< StyleClusterCallback > _styleCallback;
    osg::ref_ptr< CanClusterCallback > _canClusterCallback;

    osg::ref_ptr< Horizon > _horizon;

    osg::Matrixd _lastViewMatrix;

    ClusterList _clusters;

    bool _dirty;

    bool _enabled;
};

#endif