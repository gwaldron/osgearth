/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_ANNOTATION_ANNOTATION_DATA_H
#define OSGEARTH_ANNOTATION_ANNOTATION_DATA_H 1

#include <osgEarthAnnotation/Common>
#include <osg/Referenced>
#include <osgEarth/Viewpoint>

namespace osgEarth { namespace Annotation
{	
    using namespace osgEarth;

    /**
     * Stores annotation metadata/extra information that can be stored in a node's
     * UserData container.
     */
    class OSGEARTHANNO_EXPORT AnnotationData : public osg::Referenced
    {
    public:
        AnnotationData();

    public:
        /**
         * Readable name of the annotation.
         */
        void setName( const std::string& value ) { _name = value; }
        const std::string& getName() const { return _name; }

        /**
         * Readable description of the annotation.
         */
        void setDescription( const std::string& value ) { _description = value; }
        const std::string& getDescription() const { return _description; }

        /**
         * Priority of the item
         */
        void setPriority( float value ) { _priority = value; }
        float getPriority() const { return _priority; }

        /**
         * Viewpoint associated with this annotation.
         */
        void setViewpoint( const Viewpoint& vp ) {
            if ( _viewpoint )
                delete _viewpoint;
            _viewpoint = new Viewpoint(vp);
        }

        const Viewpoint* getViewpoint() const {
            return _viewpoint;
        }

    public:
        virtual ~AnnotationData();

    protected:
        std::string _name;
        std::string _description;
        float       _priority;
        Viewpoint*  _viewpoint;
    };

} } // namespace osgEarth::Annotation

#endif //OSGEARTH_ANNOTATION_ANNOTATION_DATA_H
