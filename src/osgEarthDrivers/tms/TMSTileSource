/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2019 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_DRIVERS_TMS_TMSTILESOURCE
#define OSGEARTH_DRIVERS_TMS_TMSTILESOURCE 1

#include "TMSOptions"

#include <osgEarth/TileSource>
#include <osgEarth/Registry>
#include <osgEarthUtil/TMS>

#include <osg/Notify>

using namespace osgEarth;
using namespace osgEarth::Util;


namespace osgEarth { namespace Drivers { namespace TileMapService
{
    class TMSTileSource : public TileSource
    {
    public:
        TMSTileSource(const TileSourceOptions& options);

    public: // TileSource

        // one-time initialization (per source)
        Status initialize(const osgDB::Options* dbOptions);

        // TileSource timestamp is the time of the time map metadata.
        TimeStamp getLastModifiedTime() const;

        // reflect a default cache policy based on whether this TMS repo is
        // local or remote.
        CachePolicy getCachePolicyHint(const Profile* targetProfile) const;

        // creates an image from the TMS repo.
        osg::Image* createImage(
            const             TileKey& key, 
            ProgressCallback* progress);

        // writes an image to the TMS repo
        bool storeImage(
            const TileKey& key, 
            osg::Image*       image,
            ProgressCallback* progress);

        int getPixelsPerTile() const;

        virtual std::string getExtension() const;

    private:

        osg::ref_ptr<TMS::TileMap>        _tileMap;
        bool                              _invertY;
        const TMSOptions                  _options;
        osg::ref_ptr<osgDB::Options>      _dbOptions;
        osg::ref_ptr<osgDB::ReaderWriter> _writer;
        bool                              _forceRGB;

        bool resolveWriter();
    };

} } } // namespace osgEarth::Drivers::TileMapService

#endif // OSGEARTH_DRIVERS_TMS_TMSTILESOURCE