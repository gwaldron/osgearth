/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
 * Copyright 2020 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_TDTILES_H
#define OSGEARTH_TDTILES_H

#include <osgEarth/Common>
#include <osgEarth/Config>
#include <osgEarth/URI>
#include <osgEarth/JsonUtils>
#include <osgEarth/GeoData>
#include <osg/Group>
#include <osg/MatrixTransform>
#include <osgDB/Options>
#include <osgUtil/CullVisitor>

/**
 * 3D Tiles
 * https://github.com/AnalyticalGraphicsInc/3d-tiles
 * EXPERIMENTAL
 */
namespace osgEarth { namespace Contrib { namespace ThreeDTiles
{
    using namespace osgEarth;

    enum RefinePolicy
    {
        REFINE_REPLACE,
        REFINE_ADD
    };

    struct LoadContext
    {
        URIContext _uc;
        RefinePolicy _defaultRefine;
    };

    class OSGEARTH_EXPORT Asset
    {
        OE_OPTION(std::string, version);
        OE_OPTION(std::string, tilesetVersion);

        Asset() { }
        Asset(const Json::Value& value) { fromJSON(value); }
        void fromJSON(const Json::Value&);
        Json::Value getJSON() const;
    };

    class OSGEARTH_EXPORT BoundingVolume
    {
        OE_OPTION(osg::BoundingBox, box);
        OE_OPTION(osg::BoundingBox, region);
        OE_OPTION(osg::BoundingSphere, sphere);

        BoundingVolume() { }
        BoundingVolume(const Json::Value& value) { fromJSON(value); }
        void fromJSON(const Json::Value&);
        Json::Value getJSON() const;

        osg::BoundingSphere asBoundingSphere() const;
    };

    class OSGEARTH_EXPORT TileContent
    {
        OE_OPTION(BoundingVolume, boundingVolume);
        OE_OPTION(URI, uri);

        TileContent() { }
        TileContent(const Json::Value& value, LoadContext& uc) { fromJSON(value, uc); }
        void fromJSON(const Json::Value&, LoadContext&);
        Json::Value getJSON() const;
    };

    class OSGEARTH_EXPORT Tile : public osg::Referenced
    {
    public:
        OE_OPTION(BoundingVolume, boundingVolume);
        OE_OPTION(BoundingVolume, viewerRequestVolume);
        OE_OPTION(double, geometricError);
        OE_OPTION(RefinePolicy, refine);
        OE_OPTION(osg::Matrix, transform);
        OE_OPTION(TileContent, content);
        OE_OPTION_VECTOR(osg::ref_ptr<Tile>, children);

        Tile() : _refine(REFINE_ADD) { }
        Tile(const Json::Value& value, LoadContext& uc) { fromJSON(value, uc); }
        void fromJSON(const Json::Value&, LoadContext& uc);
        Json::Value getJSON() const;
    };

    class OSGEARTH_EXPORT Tileset : public osg::Referenced
    {
    public:
        OE_OPTION(Asset, asset);
        OE_OPTION(BoundingVolume, boundingVolume);
        //todo: properties
        OE_OPTION(double, geometricError);
        OE_OPTION_REFPTR(Tile, root);

        Tileset() { }
        Tileset(const Json::Value& value, LoadContext& uc) { fromJSON(value, uc); }
        void fromJSON(const Json::Value&, LoadContext& uc);
        Json::Value getJSON() const;

        static Tileset* create(const std::string& tilesetJSON, const URIContext& uc);
    };

    class ThreeDTilesetNode;

    /**
     * Node that renders a 3D-Tiles content record
     */
    class OSGEARTH_EXPORT ThreeDTilesetContentNode : public osg::Group
    {
    public:
        ThreeDTilesetContentNode(ThreeDTilesetNode* tilesetNode, Tileset* tileset, osgDB::Options* options);

        osg::BoundingSphere computeBound() const;

    private:
        ThreeDTilesetNode* _tilesetNode;
        osg::ref_ptr< Tileset > _tileset;
        osg::ref_ptr< osgDB::Options > _options;
    };    

    /**
     * Node that renders a 3D-Tiles Tile
     */
    class OSGEARTH_EXPORT ThreeDTileNode : public osg::MatrixTransform
    {
    public:
        ThreeDTileNode(ThreeDTilesetNode* tileset, Tile* tile, bool immediateLoad, osgDB::Options* options);
        osg::BoundingSphere computeBound() const;

        bool hasContent();

        osg::Node* getContent();

        bool isContentReady();

        void resolveContent();

        void updateTracking();

        void requestContent(osgUtil::IncrementalCompileOperation* ico);

        double getDistanceToTile(osgUtil::CullVisitor* cv);

        double computeScreenSpaceError(osgUtil::CullVisitor* cv);

        void traverse(osg::NodeVisitor& nv);

        void unloadContent();

        const Tile* getTile() const { return _tile.get(); }


        typedef std::list< osg::ref_ptr < ThreeDTileNode > > TileTracker;

        TileTracker::iterator _trackerItr;
        bool _trackerItrValid;

    private:
        osg::ref_ptr< Tile > _tile;

        osg::ref_ptr< osg::Node > _content;
        osg::ref_ptr< osg::Group > _children;

        osg::ref_ptr< osg::Node > _boundsDebug;
        ThreeDTilesetNode* _tileset;

        osg::BoundingBoxd _boundingBox;

        Threading::Future<osg::Node> _contentFuture;
        bool _requestedContent;
        bool _contentUnloaded;

        bool _immediateLoad;

        bool _firstVisit;

        osg::ref_ptr< osgDB::Options > _options;
    };

    /**
    * Node representing a 3D-Tiles Tileet.
    */
    class OSGEARTH_EXPORT ThreeDTilesetNode : public osg::MatrixTransform
    {
    public:
        ThreeDTilesetNode(Tileset* tileset, osgDB::Options* options);

        osg::BoundingSphere computeBound() const;

        float getMaximumScreenSpaceError() const;
        void setMaximumScreenSpaceError(float maximumScreenSpaceError);

        void touchTile(osg::Node* node);

        void traverse(osg::NodeVisitor& nv);

        /**
         * Gets/sets the maximum number of tiles to keep in memory before expiring them.
         */
        unsigned int getMaxTiles() const;
        void setMaxTiles(unsigned int maxTiles);

    private:
        void startCull();
        void endCull();

        osg::ref_ptr<Tileset> _tileset;
        osg::ref_ptr<osgDB::Options> _options;
        float _maximumScreenSpaceError;

        mutable Threading::Mutex _mutex;
        ThreeDTileNode::TileTracker _tracker;
        ThreeDTileNode::TileTracker::iterator _sentryItr;

        unsigned int _maxTiles;
    };

} } }


#endif // OSGEARTH_TDTILES_H
