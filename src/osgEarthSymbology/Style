/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTHSYMBOLOGY_STYLE_H
#define OSGEARTHSYMBOLOGY_STYLE_H 1

#include <osgEarthSymbology/Common>
#include <osgEarthSymbology/Color>
#include <osgEarthSymbology/Query>
#include <osgEarthSymbology/PointSymbol>
#include <osgEarthSymbology/LineSymbol>
#include <osgEarthSymbology/PolygonSymbol>
#include <osgEarthSymbology/MarkerSymbol>
#include <osgEarthSymbology/ExtrusionSymbol>
#include <osgEarthSymbology/AltitudeSymbol>
#include <osgEarthSymbology/TextSymbol>
#include <osgEarthSymbology/Skins>
#include <osgEarthSymbology/ResourceLibrary>

#include <osgEarth/Config>
#include <osgEarth/Revisioning>
#include <osg/Object>
#include <vector>

namespace osgEarth { namespace Symbology 
{
    /**
     * Style is an unordered collection of Symbols that describes how to render
     * geometry and other objects.
     */
    class OSGEARTHSYMBOLOGY_EXPORT Style
    {
    public:
        /** Constructs a new, empty style. */
        Style( const std::string& name = "" );

        /** Constructs a style by deserializing it from a Config. */
        Style(const Config& conf);

        /** Copy constructor. */
        Style(const Style& rhs); 

        /** Gets the name of this style */
        const std::string& getName() const { return _name; }

        /** Sets the name of this style */
        void setName( const std::string& value ) { _name = value; }

        /** Starts with this style, merges in all the symbols from the other style, and
            returns a new style */
        Style combineWith( const Style& rhs ) const;

        /** Test whether the style is empty */
        bool empty() const { return _symbols.empty(); }

        /** Adds a symbol to the collection. */
        void addSymbol(Symbol* symbol);

		/** Remove a symbol from the collection */
		bool removeSymbol (Symbol* symbol);
		
        /** Gets a typed symbol from the style (the first one found). */
        template<typename T>
        T* getSymbol()
        {
            for (SymbolList::const_iterator it = _symbols.begin(); it != _symbols.end(); ++it)
            {
                Symbol* symbol = (*it).get();
                T* s = dynamic_cast<T*>(symbol);
                if (s)
                    return s;
            }
            return 0L;
        }
        template<typename T> T* get() { return getSymbol<T>(); } // alias

        /** Gets a typed symbol from the style (the first one found) */
        template<typename T>
        const T* getSymbol() const
        {
            for (SymbolList::const_iterator it = _symbols.begin(); it != _symbols.end(); ++it)
            {
                Symbol* symbol = (*it).get();
                const T* s = dynamic_cast<const T*>(symbol);
                if (s)
                    return s;
            }
            return 0L;
        }
        template<typename T> const T* get() const { return getSymbol<T>(); } // alias

        /** Gets a typed symbol from the style (first one found), or creates/adds/returns one of 
            that type if it doesn't already exist. */
        template<typename T>
        T* getOrCreateSymbol()
        {
            T* sym = getSymbol<T>();
            if ( !sym )
            {
                sym = new T();
                addSymbol( sym );
            }
            return sym;
        }
        template<typename T> T* getOrCreate() { return getOrCreateSymbol<T>(); } // alias        

        /** Serializes this object into a Config. */
        virtual Config getConfig( bool keepOrigType =true ) const;

        void mergeConfig( const Config& conf );
        void fromCSS( const std::string& css );

    protected:
        std::string                 _name;
        SymbolList                  _symbols;
        std::string                 _origType;
        std::string                 _origData;
        optional<URI>               _uri;
    };

    typedef std::vector<Style>           StyleList;
    typedef std::map<std::string, Style> StyleMap;

    /**
     * A style selector lets you classify styles based on rules, such as a
     * feature query. By default the selector selects the style with the
     * same name as the selector, but you can override this by settings
     * the styleName property.
     */
    class OSGEARTHSYMBOLOGY_EXPORT StyleSelector
    {
    public:
        StyleSelector( const Config& conf =Config() );

    public: // properties

        /** Name of this style class. */
        std::string& name() { return _name; }
        const std::string& name() const { return _name; }

        /** Name of the style to select */
        optional<std::string>& styleName() { return _styleName; }
        const optional<std::string>& styleName() const { return _styleName; }

        /** Expression/spatial filter used to select items to which the style will apply */
        optional<Query>& query() { return _query; }
        const optional<Query>& query() const { return _query; }

        /** Returns the styleClass() property, if set; otherwise returns the selector name. */
        std::string getSelectedStyleName() const;

        //Configurable
        virtual void mergeConfig( const Config& conf );
        virtual Config getConfig() const;

    protected:
        std::string           _name;
        optional<std::string> _styleName;
        optional<Query>       _query;
    };

    typedef std::list<StyleSelector>   StyleSelectorList;
    typedef std::vector<StyleSelector> StyleSelectorVector;


    /**
     * A complete definition of style information.
     */
    class OSGEARTHSYMBOLOGY_EXPORT StyleSheet : public osg::Referenced
    {
    public:
        /** Constructs a new style sheet, optionally from a Config serialization. */
        StyleSheet( const Config& conf =Config() );

        /** Adds a style to this sheet. */
        void addStyle( const Style& style );

        /** Removes a style from this sheet. */
        void removeStyle( const std::string& name );
        
        /** Gets a named style from this sheet. If the name isn't found, optionally falls back on the
            "default" style */
        Style* getStyle( const std::string& name, bool fallBackOnDefault =true );
        const Style* getStyle( const std::string& name, bool fallBackOnDefault =true ) const;
        //bool getStyle( const std::string& name, Style*& out_style, bool fallBackOnDefault =true );
        //bool getStyle( const std::string& name, const Style*& out_style, bool fallBackOnDefault =true ) const;

        /** Gets the default style in this sheet. */
        Style* getDefaultStyle();
        const Style* getDefaultStyle() const;
        //bool getDefaultStyle( Style*& out_style );
        //bool getDefaultStyle( const Style*& out_style ) const;

        /** Selectors pick a style from the sheet based on some criteria. */
        StyleSelectorList& selectors() { return _selectors; }
        const StyleSelectorList& selectors() const { return _selectors; }

        /** Adds a resource library. */
        void addResourceLibrary( const std::string& name, ResourceLibrary* library );

        /** Gets a resource library by name. */
        ResourceLibrary* getResourceLibrary( const std::string& name ) const;

        /** Resource libraries in this sheet. */
        const ResourceLibraryMap& resourceLibraries() const { return _libraries; }

    public: // serialization functions

        virtual Config getConfig() const;
        virtual void mergeConfig( const Config& conf );

    protected:
        ResourceLibraryMap _libraries;
        StyleSelectorList  _selectors;
        StyleMap           _styles;
        Style              _emptyStyle;
    };

} } // namespace osgEarth::Symbology


#endif // OSGEARTHSYMBOLOGY_STYLE_H
