/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_PROCEDURAL_GROUND_VEGETATION_LAYER_BINDLESS_H
#define OSGEARTH_PROCEDURAL_GROUND_VEGETATION_LAYER_BINDLESS_H

#include "Export"
#include "Biome"
#include "LifeMapLayer"
#include "BiomeLayer"
#include "BiomeManager"

#include <osgEarth/PatchLayer>
#include <osgEarth/LayerReference>
#include <osgEarth/LandCoverLayer>
#include <osgEarth/Chonk>

#include <chrono>

namespace osgEarth { namespace Procedural
{
    using namespace osgEarth;

    /**
     * Layer that renders trees and undergrowth.
     */
    class OSGEARTHPROCEDURAL_EXPORT VegetationLayer : public PatchLayer
    {
    public:
        class OSGEARTHPROCEDURAL_EXPORT Options : public PatchLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, PatchLayer::Options);
            OE_OPTION_LAYER(ImageLayer, colorLayer);
            OE_OPTION_LAYER(BiomeLayer, biomeLayer);
            OE_OPTION(float, colorMinSaturation);
            OE_OPTION(bool, alphaToCoverage);
            OE_OPTION(float, maxSSE);

            struct OSGEARTHPROCEDURAL_EXPORT Group
            {
                OE_OPTION(bool, enabled);
                OE_OPTION(Distance, spacing);
                OE_OPTION(float, maxRange);
                OE_OPTION(unsigned, lod);
                OE_OPTION(unsigned, count);
                OE_OPTION(bool, castShadows);
                OE_OPTION(float, maxAlpha);

                // internal
                osg::ref_ptr<osg::StateSet> _drawStateSet;
                std::function<osg::Node*(
                    const osg::BoundingBox&,
                    std::vector<osg::Texture*>&)> _createImpostor;
            };
            OE_OPTION_VECTOR(Group, groups);
            const Group& group(AssetGroup::Type t) const { 
                return groups()[t];
            }
            Group& group(AssetGroup::Type t) {
                return groups()[t];
            }

            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarth, VegetationLayer, Options, PatchLayer, Vegetation);

        //! Layer containing biome data
        void setBiomeLayer(BiomeLayer*);
        BiomeLayer* getBiomeLayer() const;

        //! Layer containing life map data
        void setLifeMapLayer(LifeMapLayer*);
        LifeMapLayer* getLifeMapLayer() const;

        //! Color modulation layer
        void setColorLayer(ImageLayer* layer);
        ImageLayer* getColorLayer() const;

        //! LOD at which to draw ground cover
        bool hasGroupAtLOD(unsigned lod) const;
        AssetGroup::Type getGroupAtLOD(unsigned lod) const;
        unsigned getGroupLOD(AssetGroup::Type) const;

        //! Whether any of the vegetation casts shadows on the terrain
        //void setCastShadows(bool value);
        bool getCastShadows() const;

        //! Whether to enable alpha-to-coverage mode.
        //! Only use this when multisampling it ON
        void setUseAlphaToCoverage(bool value);
        bool getUseAlphaToCoverage() const;

        void setMaxRange(AssetGroup::Type, float);
        float getMaxRange(AssetGroup::Type) const;

        void setEnabled(AssetGroup::Type, bool);
        bool getEnabled(AssetGroup::Type) const;

        void setSSEScales(const osg::Vec4f& lods);
        osg::Vec4f getSSEScales() const;

        //! Force regeneration of the visible data
        void dirty();

    public:
        struct Placement
        {
            OE_PROPERTY(osg::Vec3d, mapPoint);
            OE_PROPERTY(osg::Vec2d, localPoint);
            OE_PROPERTY(osg::Vec2f, uv);
            OE_PROPERTY(osg::Vec3f, scale);
            OE_PROPERTY(float, rotation);
            OE_PROPERTY(ResidentModelAsset::Ptr, asset);
        };

        //! Gets all the asset placement information for a given
        //! tile within the given asset group.
        const std::vector<Placement> getAssetPlacements(
            const TileKey& key,
            const AssetGroup::Type& group,
            bool loadBiomesOnDemand,
            ProgressCallback* progress) const;

    protected:

        virtual void init() override;
        virtual Status openImplementation() override;
        virtual Status closeImplementation() override;

    public:

        virtual void update(osg::NodeVisitor& nv) override;
        virtual void cull(const TileBatch&, osg::NodeVisitor& nv) const override;

        virtual void addedToMap(const Map* map) override;
        virtual void removedFromMap(const Map* map) override;
        virtual void prepareForRendering(TerrainEngine*) override;

        virtual void resizeGLObjectBuffers(unsigned maxSize) override;
        virtual void releaseGLObjects(osg::State* state) const override;

    protected:
        virtual ~VegetationLayer();

        struct LayerAcceptor : public PatchLayer::AcceptCallback
        {
            VegetationLayer* _layer;
            LayerAcceptor(VegetationLayer* layer) : _layer(layer) { }
            bool acceptLayer(osg::NodeVisitor& nv, const osg::Camera* camera) const;
            bool acceptKey(const TileKey& key) const;
        };
        friend struct LayerAcceptor;

        LayerReference<LifeMapLayer> _lifeMapLayer;
        LayerReference<BiomeLayer> _biomeLayer;
        osg::observer_ptr<const Map> _map;
        osg::ref_ptr<osg::Shader> _cullShader;

        void buildStateSets();
        void reset();

        // call from UPDATE peridoically to see if new biomes
        // caused new assets to page in.
        // Returns true if the revision changes and a job to load new
        // assets started.
        bool checkForNewAssets() const;

        // Result of background drawable-creation jobs
        using FutureDrawable = Future<osg::ref_ptr<ChonkDrawable>>;

        struct TileKeyAndRevision {
            TileKey key;
            int revision;
            bool operator == (const TileKeyAndRevision& rhs) const {
                return key == rhs.key && revision == rhs.revision;
            }
            std::size_t operator()(const TileKeyAndRevision& rhs) const {
                return hash_value_unsigned(key.hash(), revision);
            }
        };

        struct Tile
        {
            using Ptr = std::shared_ptr<Tile>;
            using WeakPtr = std::weak_ptr<Tile>;
            FutureDrawable _drawable;
        };

        using Tiles = std::unordered_map<
            TileKeyAndRevision,
            Tile::Ptr,
            TileKeyAndRevision>;

        mutable Mutexed<Tiles> _tiles;

        struct TileView
        {
            Tile::Ptr _tile;
            osg::ref_ptr<osg::RefMatrix> _matrix;
        };

        // Data unique to a specific camera traversal
        // (multiple views, shadow cams, etc)
        struct CameraState
        {
            using Ptr = std::shared_ptr<CameraState>;
            using TileViews = std::unordered_map<
                TileKeyAndRevision, TileView, TileKeyAndRevision>;
            TileViews _views;
        };
        using CameraStates = std::unordered_map<const osg::Camera*, CameraState::Ptr>;
        mutable Mutexed<CameraStates> _cameraState;

        mutable osg::FrameStamp _lastVisit; // for timeouts

        // noise texture. I guess this could go in the arena..
        osg::ref_ptr<osg::Texture> _noiseTex;
        TextureImageUnitReservation _noiseBinding;

        using AssetsByBiome = std::unordered_map<const Biome*, std::vector<ResidentModelAssetInstance>>;
        using Assets = std::vector<AssetsByBiome>;

        mutable Future<Assets> _newAssets;
        mutable Mutexed<Assets> _assets;

        mutable std::atomic_int _biomeRevision; // keep track of when to load to assets
        Status _status;

        osg::ref_ptr<osg::Uniform> _pixelScalesU;

        void configureTrees();
        void configureGrass();

        Future<osg::ref_ptr<ChonkDrawable>> createDrawableAsync(
            const TileKey&,
            const AssetGroup::Type&,
            const osg::BoundingBox& bbox) const;

        osg::ref_ptr<ChonkDrawable> createDrawable(
            const TileKey&,
            const AssetGroup::Type&,
            const osg::BoundingBox& bbox,
            ProgressCallback* c) const;

        mutable bool _requestMultisampling;
        bool _multisamplingActivated;
        void activateMultisampling();
    };

} } // namespace osgEarth::Procedural

OSGEARTH_SPECIALIZE_CONFIG(osgEarth::Procedural::VegetationLayer::Options);

#endif // OSGEARTH_PROCEDURAL_GROUND_VEGETATION_LAYER_H
