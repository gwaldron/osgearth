/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */
#ifndef OSGEARTH_FEATURES_SCRIPTENGINE_H
#define OSGEARTH_FEATURES_SCRIPTENGINE_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Script>
#include <osgEarth/Config>
#include <osgEarth/Revisioning>

namespace osgEarth { namespace Features
{
  class Feature;
  class FilterContext;

  /**
   * Configuration options for a models source.
   */
  class OSGEARTHFEATURES_EXPORT ScriptEngineOptions : public DriverConfigOptions
  {
  public:
      ScriptEngineOptions( const ConfigOptions& options =ConfigOptions() ) : 
        DriverConfigOptions( options ) { fromConfig(_conf); }

  public: // properties

      /** optional script source */
      optional<Script>& script() { return _script; }
      const optional<Script>& script() const { return _script; }

  public:
      virtual Config getConfig() const;

  protected:
      virtual void mergeConfig( const Config& conf );
      
  private:
      void fromConfig( const Config& conf );

      optional<Script> _script;
  };

  //--------------------------------------------------------------------

  class OSGEARTHFEATURES_EXPORT ScriptEngine : public osg::Object
  {
  public:
    ScriptEngine(const ScriptEngineOptions& options =ScriptEngineOptions()) : _script(options.script()) {}

    virtual bool supported(std::string lang) =0;
    virtual bool supported(Script* script) =0;

    virtual ScriptResult run(Script* script, Feature const* feature=0L, FilterContext const* context=0L) =0;
    virtual ScriptResult run(const std::string& code, Feature const* feature=0L, FilterContext const* context=0L) =0;

    virtual ScriptResult call(const std::string& function, Feature const* feature=0L, FilterContext const* context=0L) =0;

  public:
    // META_Object specialization:
    virtual osg::Object* cloneType() const { return 0; } // cloneType() not appropriate
    virtual osg::Object* clone(const osg::CopyOp&) const { return 0; } // clone() not appropriate
    virtual bool isSameKindAs(const osg::Object* obj) const { return dynamic_cast<const ScriptEngine*>(obj)!=NULL; }
    virtual const char* className() const { return "ScriptEngine"; }
    virtual const char* libraryName() const { return "osgEarth::Features"; }

  protected:
    optional<Script>  _script;
  };

  typedef std::list< osg::ref_ptr<ScriptEngine> > ScriptEngineList;
  typedef std::map<std::string, osg::ref_ptr<ScriptEngine> > ScriptEngineMap;

  //--------------------------------------------------------------------

  class OSGEARTHFEATURES_EXPORT ScriptEngineDriver : public osgDB::ReaderWriter
  {
  protected:
    const ScriptEngineOptions& getScriptEngineOptions( const osgDB::ReaderWriter::Options* rwOpt ) const;
  };

  //--------------------------------------------------------------------

  class OSGEARTHFEATURES_EXPORT ScriptEngineFactory
  {   
	public:
    static ScriptEngine* create( const std::string& language, const std::string& engineName="" );
    static ScriptEngine* create( const Script& script, const std::string& engineName="" );
    static ScriptEngine* create( const ScriptEngineOptions& options );
  };

} } // namespace osgEarth::Features

#endif // OSGEARTH_FEATURES_SCRIPTENGINE_H