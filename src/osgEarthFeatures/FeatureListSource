/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2010 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/

#ifndef OSGEARTHFEATURES_FEATURELIST_SOURCE_H
#define OSGEARTHFEATURES_FEATURELIST_SOURCE_H 1

#include <osgEarthFeatures/Common>
#include <osgEarthFeatures/Feature>
#include <osgEarthFeatures/FeatureCursor>
#include <osgEarthFeatures/FeatureSource>

#include <osgEarth/Profile>
#include <osgEarth/GeoData>

namespace osgEarth { namespace Features
{   
    class OSGEARTHFEATURES_EXPORT FeatureListSource : public osgEarth::Features::FeatureSource
    {
    public:
        FeatureListSource();

        virtual FeatureCursor* createFeatureCursor( const Symbology::Query& query );

        virtual bool isWritable() const { return true; }
        virtual bool deleteFeature(FeatureID fid);
        virtual int getFeatureCount() const { return _features.size(); }
        virtual Feature* getFeature( FeatureID fid );
        virtual bool insertFeature(Feature* feature);
        virtual Geometry::Type getGeometryType() const { return Geometry::TYPE_UNKNOWN; }

        FeatureList& getFeatures() { return _features; }

    public: // Styling

        virtual bool hasEmbeddedStyles() const { return false; }


    public: 
        virtual const char* className() const { return "FeatureListSource"; }
        virtual const char* libraryName() const { return "osgEarthFeatures"; }

    protected:
        virtual const FeatureProfile* createFeatureProfile();

        FeatureList _features;
        osg::ref_ptr< FeatureProfile > _profile;
    };

} } // namespace osgEarth::Features

#endif // OSGEARTHFEATURES_FEATURELIST_SOURCE_H

