/* -*-c++-*- */
/* osgEarth - Geospatial SDK for OpenSceneGraph
* Copyright 2008-2012 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS
* IN THE SOFTWARE.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_SPLAT_GROUND_COVER_LAYER_H
#define OSGEARTH_SPLAT_GROUND_COVER_LAYER_H

#include "Export"
#include "Coverage"
#include "Zone"
#include <osgEarth/PatchLayer>
#include <osgEarth/LayerReference>
#include <osgEarth/LandCoverLayer>

namespace osgEarth { namespace Splat
{
    //! Layer that renders billboards on the ground using the GPU,
    //! like trees, grass, rocks, etc.
    class OSGEARTHSPLAT_EXPORT GroundCoverLayer : public PatchLayer
    {
    public:
        class OSGEARTHSPLAT_EXPORT Options : public PatchLayer::Options {
        public:
            META_LayerOptions(osgEarth, Options, PatchLayer::Options);
            OE_OPTION(LandCoverLayer::Options, landCoverLayer);
            OE_OPTION(std::string, landCoverLayerName);
            OE_OPTION(ImageLayer::Options, maskLayer);
            OE_OPTION(std::string, maskLayerName);
            OE_OPTION(ImageLayer::Options, colorLayer);
            OE_OPTION(std::string, colorLayerName);
            OE_OPTION(unsigned, lod);
            OE_OPTION(bool, castShadows);
            OE_OPTION(bool, grass);
            OE_OPTION_VECTOR(ZoneOptions, zones);
            virtual Config getConfig() const;
        private:
            void fromConfig(const Config& conf);
        };

    public:
        META_Layer(osgEarth, GroundCoverLayer, Options, PatchLayer, GroundCover);

        //! Layer containing required coverage data
        void setLandCoverLayer(LandCoverLayer* landCoverLayer);
        LandCoverLayer* getLandCoverLayer() const;

        //! Layer containing the land cover dictionary.
        void setLandCoverDictionary(LandCoverDictionary* landCoverDict);
        LandCoverDictionary* getLandCoverDictionary() const;

        //! Masking layer (optional)
        void setMaskLayer(ImageLayer* layer);
        ImageLayer* getMaskLayer() const;

        //! Color modulation layer
        void setColorLayer(ImageLayer* layer);
        ImageLayer* getColorLayer() const;

        //! LOD at which to draw ground cover
        void setLOD(const unsigned& value);
        const unsigned& getLOD() const;

        //! Geogrphic zones; at least one is required
        Zones& getZones() { return _zones; }
        const Zones& getZones() const { return _zones; }

        //! Whether the ground cover casts shadows on the terrain
        void setCastShadows(const bool& value);
        const bool& getCastShadows() const;

    protected:

        //! Override post-ctor init
        virtual void init();

        //! Override layer open
        virtual Status openImplementation();

        //! Get geometry for a tilekey
        virtual osg::Node* createNodeImplementation(const DrawContext& dc);

        //! Serialize
        virtual Config getConfig() const;

    public:

        //! Called when this layer is added to the map
        virtual void addedToMap(const Map* map);
        virtual void removedFromMap(const Map* map);
        virtual void setTerrainResources(TerrainResources*);

        virtual void resizeGLObjectBuffers(unsigned maxSize);
        virtual void releaseGLObjects(osg::State* state) const;

    protected:
        virtual ~GroundCoverLayer() { }

        LayerReference<LandCoverDictionary> _landCoverDict;
        LayerReference<LandCoverLayer> _landCoverLayer;
        LayerReference<ImageLayer> _maskLayer;
        LayerReference<ImageLayer> _colorLayer;

        TextureImageUnitReservation _groundCoverTexBinding;
        TextureImageUnitReservation _noiseBinding;

        Zones _zones;
        bool _zonesConfigured;

        void buildStateSets();

        struct LayerAcceptor : public PatchLayer::AcceptCallback
        {
            GroundCoverLayer* _layer;
            LayerAcceptor(GroundCoverLayer* layer) : _layer(layer) { }
            bool acceptLayer(osg::NodeVisitor& nv, const osg::Camera* camera) const;
            bool acceptKey(const TileKey& key) const;
        };
        friend struct LayerAcceptor;

        struct ZoneSelector : public Layer::TraversalCallback
        {
            GroundCoverLayer* _layer;
            ZoneSelector(GroundCoverLayer* layer) : _layer(layer) { }
            void operator()(osg::Node*, osg::NodeVisitor*) const;
        };
        friend struct ZoneSelector;

        // Custom GL renderer for ground cover
        struct Renderer : public PatchLayer::DrawCallback
        {
            Renderer(GroundCoverLayer* layer);

            struct Settings
            {
                double _tileWidth;
            };

            // Tracks a GL state to minimize state changes
            struct DrawState
            {
                DrawState();

                void reset(const osg::State*, Settings*);

                // Geometry differs by zone/groundcover settings
                typedef UnorderedMap<const void*, osg::ref_ptr<osg::Geometry> > GeomPerGroundCover;
                GeomPerGroundCover _geom;

                osg::ref_ptr<osg::ElementBufferObject> _ebo;

                const osg::Program::PerContextProgram* _pcp;

                unsigned _tilesDrawnThisFrame;

                GLint _numInstancesUL;
                int _numInstances1D;

                GLint _LLUL;
                osg::Vec3f _LLAppliedValue;

                GLint _URUL;
                osg::Vec3f _URAppliedValue;

                GLint _instancedModelUL;
                int _instancedModelValue;

                GLint _LLNormalUL;
                GLint _URNormalUL;

                Renderer* _renderer;
            };

            // one per graphics context
            osg::buffered_object<DrawState> _drawStateBuffer;

            // uniform IDs
            unsigned _numInstancesUName;
            unsigned _LLUName, _URUName;
            unsigned _LLNormalUName, _URNormalUName;
            unsigned _instancedModelUName;

            // DrawCallback API
            void preDraw(osg::RenderInfo& ri, osg::ref_ptr<osg::Referenced>& out_data);
            void draw(osg::RenderInfo& ri, const DrawContext& di, osg::Referenced* data);
            void postDraw(osg::RenderInfo& ri, osg::Referenced* data);

            void resizeGLObjectBuffers(unsigned maxSize);
            void releaseGLObjects(osg::State* state) const;

            Settings _settings;
            GroundCoverLayer* _layer;
        };

        osg::ref_ptr<Renderer> _renderer;

        bool _useCoverageToAlpha;

        bool _debug;
        osg::ref_ptr<osg::Drawable> _debugDrawable;

        virtual void loadShaders(
            VirtualProgram* vp,
            const osgDB::Options* options) const;

        virtual osg::Geometry* createGeometry(
            unsigned vboTileDim) const;
    };

} } // namespace osgEarth::Splat
OSGEARTH_SPECIALIZE_CONFIG(osgEarth::Splat::GroundCoverLayer::Options);

#endif // OSGEARTH_SPLAT_GROUND_COVER_LAYER_H
