/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2010 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_COMMON_H
#define OSGEARTH_COMMON_H 1

#include <osgEarth/Export>
#include <osgEarth/Notify>
#include <osg/Referenced>
#include <osg/ref_ptr>
#include <osg/Version>
#include <string>

// define the OSG Version checks for older OSG versions

#ifndef OSG_MIN_VERSION_REQUIRED
#  define OSG_MIN_VERSION_REQUIRED(MAJOR, MINOR, PATCH) ((OPENSCENEGRAPH_MAJOR_VERSION>MAJOR) || (OPENSCENEGRAPH_MAJOR_VERSION==MAJOR && (OPENSCENEGRAPH_MINOR_VERSION>MINOR || (OPENSCENEGRAPH_MINOR_VERSION==MINOR && OPENSCENEGRAPH_PATCH_VERSION>=PATCH))))
#  define OSG_VERSION_LESS_THAN(MAJOR, MINOR, PATCH) ((OPENSCENEGRAPH_MAJOR_VERSION<MAJOR) || (OPENSCENEGRAPH_MAJOR_VERSION==MAJOR && (OPENSCENEGRAPH_MINOR_VERSION<MINOR || (OPENSCENEGRAPH_MINOR_VERSION==MINOR && OPENSCENEGRAPH_PATCH_VERSION<PATCH))))
#  define OSG_VERSION_LESS_OR_EQUAL(MAJOR, MINOR, PATCH) ((OPENSCENEGRAPH_MAJOR_VERSION<MAJOR) || (OPENSCENEGRAPH_MAJOR_VERSION==MAJOR && (OPENSCENEGRAPH_MINOR_VERSION<MINOR || (OPENSCENEGRAPH_MINOR_VERSION==MINOR && OPENSCENEGRAPH_PATCH_VERSION<=PATCH))))
#  define OSG_VERSION_GREATER_THAN(MAJOR, MINOR, PATCH) ((OPENSCENEGRAPH_MAJOR_VERSION>MAJOR) || (OPENSCENEGRAPH_MAJOR_VERSION==MAJOR && (OPENSCENEGRAPH_MINOR_VERSION>MINOR || (OPENSCENEGRAPH_MINOR_VERSION==MINOR && OPENSCENEGRAPH_PATCH_VERSION>PATCH))))
#  define OSG_VERSION_GREATER_OR_EQUAL(MAJOR, MINOR, PATCH) ((OPENSCENEGRAPH_MAJOR_VERSION>MAJOR) || (OPENSCENEGRAPH_MAJOR_VERSION==MAJOR && (OPENSCENEGRAPH_MINOR_VERSION>MINOR || (OPENSCENEGRAPH_MINOR_VERSION==MINOR && OPENSCENEGRAPH_PATCH_VERSION>=PATCH))))
#endif

/** osgEarth core */
namespace osgEarth
{
    // application-wide unique ID.
    typedef int UID;
    
    /**
     * A template for defining "optional" class members. An optional member has a default value
     * and a flag indicating whether the member is "set".
     * This is used extensively in osgEarth's ConfigOptions subsystem.
     */
    template<typename T> struct optional {
        optional() : _set(false), _value(T()), _defaultValue(T()) { }
        optional(T defaultValue) : _set(false), _value(defaultValue), _defaultValue(defaultValue) { }
        optional(T defaultValue, T value) : _set(true), _value(value), _defaultValue(defaultValue) { }
        optional(const optional<T>& rhs) { (*this)=rhs; }
        virtual ~optional() { }
        optional<T>& operator =(const optional<T>& rhs) { _set=rhs._set; _value=rhs._value; _defaultValue=rhs._defaultValue; return *this; }
        const T& operator =(const T& value) { _set=true; _value=value; return _value; }
        bool operator ==(const optional<T>& rhs) const { return _set && rhs._set && _value==rhs._value; }
        bool operator !=(const optional<T>& rhs) const { return !( (*this)==rhs); }
        bool operator ==(const T& value) const { return _value==value; }
        bool operator !=(const T& value) const { return _value!=value; }
        bool isSetTo(const T& value) const { return _set && _value==value; } // differs from == in that the value must be explicity set
        bool isSet() const { return _set; }
        void unset() { _set = false; _value=_defaultValue; }

        //T& get() { return _value; }
        const T& get() const { return _value; }
        const T& value() const { return _value; }
        const T& defaultValue() const { return _defaultValue; }

        // gets a mutable reference, automatically setting
        T& mutable_value() { _set = true; return _value; }

        void init(T defValue) { _value=defValue; _defaultValue=defValue; unset(); }

        operator const T*() const { return &_value; }

        T* operator ->() { _set=true; return &_value; }
        const T* operator ->() const { return &_value; }

    private:
        bool _set;
        T _value;
        T _defaultValue;
        typedef T* optional::*unspecified_bool_type;

    public:
        operator unspecified_bool_type() const { return 0; }
    };
}

// backwards-compat stuff:

#if OSG_VERSION_LESS_THAN( 2, 9, 5 )

#include <osgDB/ReaderWriter>
namespace osgDB
{
    typedef osgDB::ReaderWriter::Options Options;
}

#endif // OSG_VERSION_LESS_THAN( 2, 9, 5 )

#if OSG_MIN_VERSION_REQUIRED(2,9,8)
#  include <osgGA/CameraManipulator>
    namespace osgGA {
        typedef CameraManipulator MatrixManipulator;
    };
#  include <osg/ObserverNodePath>
#  define USE_OBSERVER_NODE_PATH 1
#else
#  include <osgGA/MatrixManipulator>
#endif


#endif // OSGEARTH_COMMON_H
