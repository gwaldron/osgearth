#ifndef OSGEARTH_UTIL_IMAGE_OVERLAY_EDITOR_H
#define OSGEARTH_UTIL_IMAGE_OVERLAY_EDITOR_H

#include <osgEarth/MapNode>
#include <osgEarthUtil/Common>
#include <osgEarthUtil/ImageOverlay>
#include <osg/MatrixTransform>
#include <osgGA/GUIEventHandler>
#include <osgEarthUtil/Draggers>

namespace osgEarth { namespace Util
{
    class OSGEARTHUTIL_EXPORT ImageOverlayEditor : public osg::Group
    {
    public:
        typedef std::map< ImageOverlay::ControlPoint, osg::ref_ptr< osgManipulator::Dragger > >  ControlPointDraggerMap;

        ImageOverlayEditor(ImageOverlay* overlay, const osg::EllipsoidModel* ellipsoid, osg::Node* terrain);

        ControlPointDraggerMap& getDraggers() { return _draggers; }

        const osg::EllipsoidModel* getEllipsoid() const { return _ellipsoid.get();}
        void setEllipsoid( const osg::EllipsoidModel* ellipsoid) { _ellipsoid = ellipsoid; };

        osg::Node* getTerrain() const { return _terrain.get(); }
        void setTerrain( osg::Node* terrain) { _terrain = terrain;}

        ImageOverlay* getOverlay() { return _overlay.get();}

        void updateDraggers();

    protected:

        ~ImageOverlayEditor();
        void addDragger( ImageOverlay::ControlPoint controlPoint );

        osg::ref_ptr< ImageOverlay > _overlay;
        osg::ref_ptr< const osg::EllipsoidModel > _ellipsoid;
        osg::ref_ptr< osg::Node > _terrain;
        osg::ref_ptr< osgEarth::Util::ImageOverlay::ImageOverlayCallback > _overlayCallback;
        ControlPointDraggerMap _draggers;
    };

} } // namespace osgEarth::Util

#endif // OSGEARTH_UTIL_IMAGE_OVERLAY_EDITOR_H

